/**
 * 
 */
package kata08Readable;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

/**
 * @author sonal
 *
 */
public class WordProcessing {

	private ArrayList<String> wordMap = new ArrayList<>();
	private ArrayList<String> sixCount = new ArrayList<>();
	private Map<String,List<String>> resultMap = new TreeMap<>();
	
	public void wordLoading(List<String> words) {
		for(String word : words) {
			if (word.length() == 6) {
				sixCount.add(word);
				wordMap.add(word);
			} else {
				wordMap.add(word);
			}
		}
	}
	
    public void process() {
        List<String> smallWords = wordMap.stream()
                .filter(word -> word.length() < 6)
                .collect(Collectors.toList());

        String currentWord;
        String startWord;
        String endWord;
        String inverted;

        for (int i = 0; i < smallWords.size(); i++) {
            startWord = smallWords.get(i);

            for (int x = i + 1; x < smallWords.size(); x++) {
                endWord = smallWords.get(x);

                // here two different combinations of words are checked to avoid reading the entire list twice.
                currentWord = startWord.concat(endWord);
                addWordIfExistsInDictionary(dictionary, currentWord);

                inverted = endWord.concat(startWord);
                addWordIfExistsInDictionary(dictionary, inverted);
            }
        }
    }
	
}
